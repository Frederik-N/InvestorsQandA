{"version":3,"sources":["Auth.tsx","components/Page.tsx","http.ts","QuestionsData.ts","components/Form.tsx","AppSettings.ts","components/PageTitle.tsx","components/Styles.ts","components/Field.tsx","Store.ts","user.svg","components/Icons.tsx","components/Header.tsx","components/Question.tsx","components/QuestionList.tsx","components/HomePage.tsx","components/SearchPage.tsx","components/SignInPage.tsx","components/NotFoundPage.tsx","components/Answer.tsx","components/AnswerList.tsx","components/QuestionPage.tsx","components/SignOutPage.tsx","components/AuthorizedPage.tsx","components/App.tsx","index.tsx"],"names":["Auth0Context","createContext","isAuthenticated","signIn","signOut","loading","useAuth","useContext","AuthProvider","children","useState","setIsAuthenticated","undefined","user","setUser","auth0Client","setAuth0Client","setLoading","useEffect","a","createAuth0Client","authSettings","auth0FromHook","window","location","pathname","search","indexOf","handleRedirectCallback","replace","origin","isAuthenticatedFromHook","getUser","initAuth0","getAuth0ClientFromState","Error","Provider","value","loginWithRedirect","logout","client_id","returnTo","getAccessToken","getTokenSilently","accessToken","Page","title","css","http","config","Promise","resolve","reject","response","request","Request","webAPIUrl","path","method","headers","body","JSON","stringify","set","fetch","then","res","get","json","ok","parsedBody","catch","err","console","error","mapQuestionFromServer","question","created","Date","answers","map","answer","postAnswer","result","postQuestion","getUnansweredQuestions","getQuestion","questionId","searchQuestions","criteria","FormContext","values","errors","touched","required","minLength","length","Form","submitCaption","validationRules","onSubmit","submitResult","successMessage","failureMessage","setValues","setErrors","setTouched","submitting","setSubmitting","submitted","setSubmitted","submitError","setSubmitError","validate","fieldName","rules","Array","isArray","fieldErrors","forEach","rule","validator","arg","push","newErrors","handleSubmit","e","preventDefault","validateForm","success","haveError","Object","keys","disabled","showError","showSuccess","setValue","noValidate","gray6","gray5","type","domain","redirect_uri","scope","audience","PageTitle","styled","h2","gray1","gray2","gray3","primary2","accent2","fontFamily","fontSize","PrimaryButton","button","StatusText","div","baseCSS","Field","name","label","handleChange","currentTarget","handleBlur","Consumer","htmlFor","toLowerCase","id","onChange","onBlur","key","initialQuestionState","unanswered","rootReducer","combineReducers","questions","state","action","concat","postedResult","UserIcon","src","alt","width","buttonStyle","HeaderWithRouter","withRouter","history","URLSearchParams","setSearch","to","process","placeholder","local","Question","data","showContent","content","substring","userName","toLocaleDateString","toLocaleTimeString","QuestionList","renderItem","HomePage","setQuestions","questionsLoading","setQuestionsLoading","cancelled","unansweredQuestions","doGetUnansweredQuestions","onClick","SearchPage","foundResults","doSearch","SignInPage","NotFoundPage","Answer","AnswerList","answerId","QuestionPage","match","setQuestion","setUpSignalRConnection","connection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","on","message","log","start","HubConnectionState","Connected","invoke","toString","cleanUpSignalRConnection","off","stop","doGetQuestion","foundQuestion","params","Number","con","SignOutPage","AuthorizedPage","AskPage","lazy","store","createStore","applyMiddleware","thunk","App","Auth","from","exact","component","fallback","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d6ebe9a.chunk.js","sourcesContent":["import React, {\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  createContext,\r\n  FC,\r\n} from 'react';\r\nimport createAuth0Client from '@auth0/auth0-spa-js';\r\nimport Auth0Client from '@auth0/auth0-spa-js/dist/typings/Auth0Client';\r\nimport { authSettings } from './AppSettings';\r\n\r\ninterface Auth0User {\r\n  name: string;\r\n  email: string;\r\n}\r\ninterface IAuth0Context {\r\n  isAuthenticated: boolean;\r\n  user?: Auth0User;\r\n  signIn: () => void;\r\n  signOut: () => void;\r\n  loading: boolean;\r\n}\r\nexport const Auth0Context = createContext<IAuth0Context>({\r\n  isAuthenticated: false,\r\n  signIn: () => {},\r\n  signOut: () => {},\r\n  loading: true,\r\n});\r\n\r\nexport const useAuth = () => useContext(Auth0Context);\r\n\r\nexport const AuthProvider: FC = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n  const [user, setUser] = useState<Auth0User | undefined>(undefined);\r\n  const [auth0Client, setAuth0Client] = useState<Auth0Client>();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    const initAuth0 = async () => {\r\n      setLoading(true);\r\n      const auth0FromHook = await createAuth0Client(authSettings);\r\n      setAuth0Client(auth0FromHook);\r\n\r\n      if (\r\n        window.location.pathname === '/signin-callback' &&\r\n        window.location.search.indexOf('code=') > -1\r\n      ) {\r\n        await auth0FromHook.handleRedirectCallback();\r\n        window.location.replace(window.location.origin);\r\n      }\r\n\r\n      const isAuthenticatedFromHook = await auth0FromHook.isAuthenticated();\r\n      if (isAuthenticatedFromHook) {\r\n        const user = await auth0FromHook.getUser();\r\n        // @ts-ignore\r\n        setUser(user);\r\n      }\r\n      setIsAuthenticated(isAuthenticatedFromHook);\r\n      setLoading(false);\r\n    };\r\n    initAuth0();\r\n  }, []);\r\n\r\n  const getAuth0ClientFromState = () => {\r\n    if (auth0Client === undefined) {\r\n      throw new Error('Auth0 client not set');\r\n    }\r\n    return auth0Client;\r\n  };\r\n\r\n  return (\r\n    <Auth0Context.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        user,\r\n        signIn: () => getAuth0ClientFromState().loginWithRedirect(),\r\n        signOut: () =>\r\n          getAuth0ClientFromState().logout({\r\n            client_id: authSettings.client_id,\r\n            returnTo: window.location.origin + '/signout-callback',\r\n          }),\r\n        loading,\r\n      }}\r\n    >\r\n      {children}\r\n    </Auth0Context.Provider>\r\n  );\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n  const auth0FromHook = await createAuth0Client(authSettings);\r\n  const accessToken = await auth0FromHook.getTokenSilently();\r\n  return accessToken;\r\n};\r\n","import { FC } from 'react';\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { PageTitle } from './PageTitle';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n  title?: string;\r\n}\r\n\r\nexport const Page: FC<Props> = ({ title, children }) => (\r\n  <div\r\n    css={css`\r\n      margin: 50px auto 20px auto;\r\n      padding: 30px 20px;\r\n      max-width: 600px;\r\n      text-align: center;\r\n    `}\r\n  >\r\n    {title && <PageTitle>{title}</PageTitle>}\r\n    {children}\r\n  </div>\r\n);\r\n","import { webAPIUrl } from './AppSettings';\r\n\r\nexport interface HttpRequest<REQB> {\r\n  path: string;\r\n  method?: string;\r\n  body?: REQB;\r\n  accessToken?: string;\r\n}\r\nexport interface HttpResponse<RESB> extends Response {\r\n  parsedBody?: RESB;\r\n}\r\n\r\nexport const http = <REQB, RESB>(\r\n  config: HttpRequest<REQB>,\r\n): Promise<HttpResponse<RESB>> => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = new Request(`${webAPIUrl}${config.path}`, {\r\n      method: config.method || 'get',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: config.body ? JSON.stringify(config.body) : undefined,\r\n    });\r\n    if (config.accessToken) {\r\n      request.headers.set('authorization', `bearer ${config.accessToken}`);\r\n    }\r\n    let response: HttpResponse<RESB>;\r\n    fetch(request)\r\n      .then((res) => {\r\n        response = res;\r\n        if (res.headers.get('Content-Type') || ''.indexOf('json') > 0) {\r\n          return res.json();\r\n        } else {\r\n          resolve(response);\r\n        }\r\n      })\r\n      .then((body) => {\r\n        if (response.ok) {\r\n          response.parsedBody = body;\r\n          resolve(response);\r\n        } else {\r\n          reject(response);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n","import { http } from './http';\r\nimport { getAccessToken } from './Auth';\r\n\r\nexport interface QuestionData {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n  answers: AnswerData[];\r\n}\r\n\r\nexport interface QuestionDataFromServer {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n  answers: AnswerData[];\r\n}\r\n\r\nexport interface AnswerData {\r\n  answerId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const mapQuestionFromServer = (\r\n  question: QuestionDataFromServer,\r\n): QuestionData => ({\r\n  ...question,\r\n  created: new Date(question.created),\r\n  answers: question.answers\r\n    ? question.answers.map((answer) => ({\r\n        ...answer,\r\n        created: new Date(answer.created),\r\n      }))\r\n    : [],\r\n});\r\n\r\nexport interface PostAnswerData {\r\n  questionId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\nexport const postAnswer = async (\r\n  answer: PostAnswerData,\r\n): Promise<AnswerData | undefined> => {\r\n  const accessToken = await getAccessToken();\r\n  try {\r\n    const result = await http<PostAnswerData, AnswerData>({\r\n      path: '/questions/answer',\r\n      method: 'post',\r\n      body: answer,\r\n      accessToken,\r\n    });\r\n\r\n    if (result.ok) {\r\n      return result.parsedBody;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  } catch (ex) {\r\n    console.error(ex);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport interface PostQuestionData {\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const postQuestion = async (\r\n  question: PostQuestionData,\r\n): Promise<QuestionData | undefined> => {\r\n  const accessToken = await getAccessToken();\r\n  try {\r\n    const result = await http<PostQuestionData, QuestionDataFromServer>({\r\n      path: '/questions',\r\n      method: 'post',\r\n      body: question,\r\n      accessToken,\r\n    });\r\n    if (result.ok && result.parsedBody) {\r\n      return mapQuestionFromServer(result.parsedBody);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  } catch (ex) {\r\n    console.error(ex);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const getUnansweredQuestions = async (): Promise<QuestionData[]> => {\r\n  try {\r\n    const result = await http<undefined, QuestionDataFromServer[]>({\r\n      path: '/questions/unanswered',\r\n    });\r\n    if (result.parsedBody) {\r\n      return result.parsedBody.map(mapQuestionFromServer);\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (ex) {\r\n    console.error(ex);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getQuestion = async (\r\n  questionId: number,\r\n): Promise<QuestionData | null> => {\r\n  try {\r\n    const result = await http<undefined, QuestionDataFromServer>({\r\n      path: `/questions/${questionId}`,\r\n    });\r\n    if (result.ok && result.parsedBody) {\r\n      return mapQuestionFromServer(result.parsedBody);\r\n    } else {\r\n      return null;\r\n    }\r\n  } catch (ex) {\r\n    console.error(ex);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const searchQuestions = async (\r\n  criteria: string,\r\n): Promise<QuestionData[]> => {\r\n  try {\r\n    const result = await http<undefined, QuestionDataFromServer[]>({\r\n      path: `/questions?search=${criteria}`,\r\n    });\r\n    if (result.ok && result.parsedBody) {\r\n      return result.parsedBody.map(mapQuestionFromServer);\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (ex) {\r\n    console.error(ex);\r\n    return [];\r\n  }\r\n};\r\n","import React, { FC, useState, createContext, FormEvent } from 'react';\r\nimport { PrimaryButton, gray5, gray6 } from './Styles';\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\n\r\nexport interface Values {\r\n  [key: string]: any;\r\n}\r\n\r\ninterface Errors {\r\n  [key: string]: string[];\r\n}\r\n\r\nexport interface Touched {\r\n  [key: string]: boolean;\r\n}\r\n\r\ninterface FormContextProps {\r\n  values: Values;\r\n  setValue?: (fieldName: string, value: any) => void;\r\n  errors: Errors;\r\n  validate?: (fieldName: string) => void;\r\n  touched: Touched;\r\n  setTouched?: (fieldName: string) => void;\r\n}\r\n\r\nexport const FormContext = createContext<FormContextProps>({\r\n  values: {},\r\n  errors: {},\r\n  touched: {},\r\n});\r\ntype Validator = (value: any, args?: any) => string;\r\n\r\nexport const required: Validator = (value: any): string =>\r\n  value === undefined || value === null || value === ''\r\n    ? 'This must be populated'\r\n    : '';\r\nexport const minLength: Validator = (value: any, length: number): string =>\r\n  value && value.length < length\r\n    ? `This must be at least ${length} characters`\r\n    : '';\r\n\r\ninterface Validation {\r\n  validator: Validator;\r\n  arg?: any;\r\n}\r\n\r\ninterface ValidationProp {\r\n  [key: string]: Validation | Validation[];\r\n}\r\n\r\nexport interface SubmitResult {\r\n  success: boolean;\r\n  errors?: Errors;\r\n}\r\n\r\ninterface Props {\r\n  submitCaption?: string;\r\n  validationRules?: ValidationProp;\r\n  onSubmit: (values: Values) => Promise<SubmitResult> | void;\r\n  submitResult?: SubmitResult;\r\n  successMessage?: string;\r\n  failureMessage?: string;\r\n}\r\n\r\nexport const Form: FC<Props> = ({\r\n  submitCaption,\r\n  children,\r\n  validationRules,\r\n  onSubmit,\r\n  submitResult,\r\n  successMessage = 'Success!',\r\n  failureMessage = 'Something went wrong!',\r\n}) => {\r\n  const [values, setValues] = useState<Values>({});\r\n  const [errors, setErrors] = useState<Errors>({});\r\n  const [touched, setTouched] = useState<Touched>({});\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [submitError, setSubmitError] = useState(false);\r\n\r\n  const validate = (fieldName: string): string[] => {\r\n    if (!validationRules) {\r\n      return [];\r\n    }\r\n    if (!validationRules[fieldName]) {\r\n      return [];\r\n    }\r\n    const rules = Array.isArray(validationRules[fieldName])\r\n      ? (validationRules[fieldName] as Validation[])\r\n      : ([validationRules[fieldName]] as Validation[]);\r\n    const fieldErrors: string[] = [];\r\n    rules.forEach((rule) => {\r\n      const error = rule.validator(values[fieldName], rule.arg);\r\n      if (error) {\r\n        fieldErrors.push(error);\r\n      }\r\n    });\r\n    const newErrors = { ...errors, [fieldName]: fieldErrors };\r\n    setErrors(newErrors);\r\n    return fieldErrors;\r\n  };\r\n\r\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (validateForm()) {\r\n      // set state to indicate submission is in progress\r\n      setSubmitting(true);\r\n      setSubmitError(false);\r\n      // call the consumer submit function\r\n      const result = await onSubmit(values);\r\n\r\n      if (result === undefined) {\r\n        return;\r\n      }\r\n      // set any errors in state\r\n      setErrors(result.errors || {});\r\n      setSubmitError(!result.success);\r\n\r\n      // set state to indicate submission has finished\r\n      setSubmitting(false);\r\n      setSubmitted(true);\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors: Errors = {};\r\n    let haveError: boolean = false;\r\n    if (validationRules) {\r\n      Object.keys(validationRules).forEach((fieldName) => {\r\n        newErrors[fieldName] = validate(fieldName);\r\n        if (newErrors[fieldName].length > 0) {\r\n          haveError = true;\r\n        }\r\n      });\r\n    }\r\n    setErrors(newErrors);\r\n    return !haveError;\r\n  };\r\n\r\n  const disabled = submitResult\r\n    ? submitResult.success\r\n    : submitting || (submitted && !submitError);\r\n\r\n  const showError = submitResult\r\n    ? !submitResult.success\r\n    : submitted && submitError;\r\n\r\n  const showSuccess = submitResult\r\n    ? submitResult.success\r\n    : submitted && !submitError;\r\n\r\n  return (\r\n    <FormContext.Provider\r\n      value={{\r\n        values,\r\n        setValue: (fieldName: string, value: any) => {\r\n          setValues({ ...values, [fieldName]: value });\r\n        },\r\n        errors,\r\n        validate,\r\n        touched,\r\n        setTouched: (fieldName: string) => {\r\n          setTouched({ ...touched, [fieldName]: true });\r\n        },\r\n      }}\r\n    >\r\n      <form noValidate={true} onSubmit={handleSubmit}>\r\n        <fieldset\r\n          disabled={disabled}\r\n          css={css`\r\n            margin: 10px auto 0 auto;\r\n            padding: 30px;\r\n            width: 350px;\r\n            background-color: ${gray6};\r\n            border-radius: 4px;\r\n            border: 1px solid ${gray5};\r\n            box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n          `}\r\n        >\r\n          {children}\r\n          <div\r\n            css={css`\r\n              margin: 30px 0px 0px 0px;\r\n              padding: 20px 0px 0px 0px;\r\n              border-top: 1px solid ${gray5};\r\n            `}\r\n          >\r\n            <PrimaryButton type=\"submit\">{submitCaption}</PrimaryButton>\r\n          </div>\r\n          {showError && (\r\n            <p\r\n              css={css`\r\n                color: red;\r\n              `}\r\n            >\r\n              {failureMessage}\r\n            </p>\r\n          )}\r\n          {showSuccess && (\r\n            <p\r\n              css={css`\r\n                color: green;\r\n              `}\r\n            >\r\n              {successMessage}\r\n            </p>\r\n          )}\r\n        </fieldset>\r\n      </form>\r\n    </FormContext.Provider>\r\n  );\r\n};\r\n","export const server =\r\n  process.env.REACT_APP_ENV === 'production'\r\n    ? 'https://amonginvestors.azurewebsites.net'\r\n    : process.env.REACT_APP_ENV === 'staging'\r\n    ? 'https://amonginvestors-staging.azurewebsites.net'\r\n    : 'http://localhost:44332';\r\n\r\nexport const webAPIUrl = `${server}/api`;\r\n\r\nexport const authSettings = {\r\n  domain: 'dev-p97h5nzt.eu.auth0.com',\r\n  client_id: 'q9BcU659fIEKLWVu2T88XD4jgHl5q3qa',\r\n  redirect_uri: window.location.origin + '/signin-callback',\r\n  scope: 'openid profile QandAAPI email',\r\n  audience: 'https://backend',\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const PageTitle = styled.h2`\r\n  font-size: 15px;\r\n  font-weight: bold;\r\n  margin: 10px 0px 5px\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const gray1 = '#383737';\r\nexport const gray2 = '#5c5a5a';\r\nexport const gray3 = '#857c81';\r\nexport const gray4 = '#b9b9b9';\r\nexport const gray5 = '#e3e2e2';\r\nexport const gray6 = '#f7f8fa';\r\n\r\nexport const primary1 = '#681c41';\r\nexport const primary2 = '#824c67';\r\n\r\nexport const accent1 = '#dbb365';\r\nexport const accent2 = '#efd197';\r\n\r\nexport const fontFamily = \"'Segoe UI', 'Helvetica Neue',sans-serif\";\r\nexport const fontSize = '16px';\r\n\r\nexport const PrimaryButton = styled.button`\r\n  background-color: ${primary2};\r\n  border-color: ${primary2};\r\n  border-style: solid;\r\n  border-radius: 5px;\r\n  font-family: ${fontFamily};\r\n  font-size: ${fontSize};\r\n  padding: 5px 10px;\r\n  color: white;\r\n  cursor: pointer;\r\n  :hover {\r\n    background-color: ${primary1};\r\n  }\r\n  :focus {\r\n    outline-color: ${primary2};\r\n  }\r\n  :disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nexport const StatusText = styled.div`\r\n  text-align: center;\r\n`;\r\n","import React, { FC, useContext, ChangeEvent, HtmlHTMLAttributes } from 'react';\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { FormContext } from './Form';\r\nimport { fontFamily, fontSize, gray5, gray2, gray6 } from './Styles';\r\n\r\ninterface Props {\r\n  name: string;\r\n  label?: string;\r\n  type?: 'Text' | 'TextArea' | 'Password';\r\n}\r\n\r\nconst baseCSS = css`\r\n  box-sizing: border-box;\r\n  font-family: ${fontFamily};\r\n  font-size: ${fontSize};\r\n  margin-bottom: 5px;\r\n  padding: 8px 10px;\r\n  border: 1px solid ${gray5};\r\n  border-radius: 3px;\r\n  color: ${gray2};\r\n  background-color: white;\r\n  width: 100%;\r\n  :focus {\r\n    outline-color: ${gray5};\r\n  }\r\n  :disabled {\r\n    background-color: ${gray6};\r\n  }\r\n`;\r\n\r\nexport const Field: FC<Props> = ({ name, label, type = 'Text' }) => {\r\n  const { setValue, touched, validate, setTouched } = useContext(FormContext);\r\n  const handleChange = (\r\n    e: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>,\r\n  ) => {\r\n    if (setValue) {\r\n      setValue(name, e.currentTarget.value);\r\n    }\r\n    if (touched[name]) {\r\n      if (validate) {\r\n        validate(name);\r\n      }\r\n    }\r\n  };\r\n  const handleBlur = () => {\r\n    if (setTouched) {\r\n      setTouched(name);\r\n    }\r\n    if (validate) {\r\n      validate(name);\r\n    }\r\n  };\r\n  return (\r\n    <FormContext.Consumer>\r\n      {({ values, errors }) => (\r\n        <div\r\n          css={css`\r\n            display: flex;\r\n            flex-direction: column;\r\n            margin-bottom: 15px;\r\n          `}\r\n        >\r\n          {label && (\r\n            <label\r\n              css={css`\r\n                font-weight: bold;\r\n              `}\r\n              htmlFor={name}\r\n            >\r\n              {label}\r\n            </label>\r\n          )}\r\n          {(type === 'Text' || type === 'Password') && (\r\n            <input\r\n              type={type.toLowerCase()}\r\n              id={name}\r\n              value={values[name] === undefined ? '' : values[name]}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              css={baseCSS}\r\n            />\r\n          )}\r\n          {type === 'TextArea' && (\r\n            <textarea\r\n              id={name}\r\n              value={values[name] === undefined ? '' : values[name]}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              css={css`\r\n                ${baseCSS};\r\n                height: 100px;\r\n              `}\r\n            />\r\n          )}\r\n          {errors[name] &&\r\n            errors[name].length > 0 &&\r\n            errors[name].map((error) => (\r\n              <div\r\n                key={error}\r\n                css={css`\r\n                  font-size: 12px;\r\n                  color: red;\r\n                `}\r\n              >\r\n                {' '}\r\n                {error}\r\n              </div>\r\n            ))}\r\n        </div>\r\n      )}\r\n    </FormContext.Consumer>\r\n  );\r\n};\r\n","import {\r\n  QuestionData,\r\n  getUnansweredQuestions,\r\n  postQuestion,\r\n  PostQuestionData,\r\n} from './QuestionsData';\r\nimport {\r\n  Action,\r\n  ActionCreator,\r\n  Dispatch,\r\n  Reducer,\r\n  combineReducers,\r\n  Store,\r\n  createStore,\r\n  applyMiddleware,\r\n} from 'redux';\r\nimport thunk, { ThunkAction } from 'redux-thunk';\r\n\r\ninterface QuestionsState {\r\n  readonly loading: boolean;\r\n  readonly unanswered: QuestionData[] | null;\r\n  readonly postedResult?: QuestionData;\r\n}\r\n\r\nexport interface AppState {\r\n  readonly questions: QuestionsState;\r\n}\r\n\r\nconst initialQuestionState: QuestionsState = {\r\n  loading: false,\r\n  unanswered: null,\r\n};\r\n\r\ninterface GettingUnansweredQuestionsAction\r\n  extends Action<'GettingUnansweredQuestions'> {}\r\n\r\nexport interface GotUnansweredQuestionsAction\r\n  extends Action<'GotUnansweredQuestions'> {\r\n  questions: QuestionData[];\r\n}\r\n\r\nexport interface PostedQuestionAction extends Action<'PostedQuestion'> {\r\n  result: QuestionData | undefined;\r\n}\r\n\r\ntype QuestionsActions =\r\n  | GettingUnansweredQuestionsAction\r\n  | GotUnansweredQuestionsAction\r\n  | PostedQuestionAction;\r\n\r\nexport const getUnansweredQuestionsActionCreator: ActionCreator<ThunkAction<\r\n  Promise<void>,\r\n  QuestionData[],\r\n  null,\r\n  GotUnansweredQuestionsAction\r\n>> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    // TODO - dispatch the GettingUnansweredQuestions action\r\n    const GettingUnansweredQuestionsAction: GettingUnansweredQuestionsAction = {\r\n      type: 'GettingUnansweredQuestions',\r\n    };\r\n    dispatch(GettingUnansweredQuestionsAction);\r\n    // TODO - get the questions from server\r\n    const questions = await getUnansweredQuestions();\r\n    // TODO - dispatch the GotUnansweredQuestions action\r\n    const GotUnansweredQuestionsAction: GotUnansweredQuestionsAction = {\r\n      questions,\r\n      type: 'GotUnansweredQuestions',\r\n    };\r\n    dispatch(GotUnansweredQuestionsAction);\r\n  };\r\n};\r\n\r\nexport const postQuestionActionCreator: ActionCreator<ThunkAction<\r\n  Promise<void>,\r\n  QuestionData[],\r\n  PostQuestionData,\r\n  PostedQuestionAction\r\n>> = (question: PostQuestionData) => {\r\n  return async (dispatch: Dispatch) => {\r\n    // TODO - get result from server\r\n    const result = await postQuestion(question);\r\n    // TODO - dispatch the PostedQuestion action\r\n    const postedQuestionsAction: PostedQuestionAction = {\r\n      type: 'PostedQuestion',\r\n      result,\r\n    };\r\n    dispatch(postedQuestionsAction);\r\n  };\r\n};\r\n\r\nexport const clearPostedQuestionActionCreator: ActionCreator<PostedQuestionAction> = () => {\r\n  const postedQuestionAction: PostedQuestionAction = {\r\n    type: 'PostedQuestion',\r\n    result: undefined,\r\n  };\r\n  return postedQuestionAction;\r\n};\r\n\r\nconst neverReached = (never: never) => {};\r\n\r\nconst questionsReducer: Reducer<QuestionsState, QuestionsActions> = (\r\n  state = initialQuestionState,\r\n  action,\r\n) => {\r\n  // TODO - Handle the different actions and return new state\r\n  switch (action.type) {\r\n    case 'GettingUnansweredQuestions': {\r\n      // TODO - return new state\r\n      return {\r\n        ...state,\r\n        unanswered: null,\r\n        loading: true,\r\n      };\r\n    }\r\n    case 'GotUnansweredQuestions': {\r\n      // TODO - return new state\r\n      return {\r\n        ...state,\r\n        unanswered: action.questions,\r\n        loading: false,\r\n      };\r\n    }\r\n    case 'PostedQuestion': {\r\n      // TODO - return new state\r\n      return {\r\n        ...state,\r\n        unanswered: action.result\r\n          ? (state.unanswered || []).concat(action.result)\r\n          : state.unanswered,\r\n        postedResult: action.result,\r\n      };\r\n    }\r\n    default:\r\n      neverReached(action);\r\n  }\r\n  return state;\r\n};\r\n\r\nconst rootReducer = combineReducers<AppState>({ questions: questionsReducer });\r\n\r\nexport function configureStore(): Store<AppState> {\r\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\r\n  return store;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/user.11a8c02f.svg\";","import React from 'react';\r\nimport user from '../user.svg';\r\nexport const UserIcon = () => <img src={user} alt=\"User\" width=\"12px\" />;\r\n","import React, { ChangeEvent, FC, useState, FormEvent } from 'react';\r\nimport { UserIcon } from './Icons';\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { fontFamily, fontSize, gray1, gray2, gray5 } from './Styles';\r\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { useAuth } from '../Auth';\r\n\r\nconst buttonStyle = css`\r\n  border: none;\r\n  font-family: ${fontFamily};\r\n  font-size: ${fontSize};\r\n  padding: 5px 10px;\r\n  background-color: transparent;\r\n  color: ${gray2};\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  span {\r\n    margin-left: 10px;\r\n  }\r\n  :focus {\r\n    outline-color: ${gray5};\r\n  }\r\n`;\r\n\r\nexport const Header: FC<RouteComponentProps> = ({ history, location }) => {\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const criteria = searchParams.get('criteria') || '';\r\n\r\n  const [search, setSearch] = useState(criteria);\r\n\r\n  const handleSearchInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setSearch(e.currentTarget.value);\r\n  };\r\n\r\n  const handleSearchSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    history.push(`/search?criteria=${search}`);\r\n  };\r\n\r\n  const { isAuthenticated, user, loading } = useAuth();\r\n\r\n  return (\r\n    <div\r\n      css={css`\r\n        position: fixed;\r\n        box-sizing: border-box;\r\n        top: 0;\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        padding: 10px 20px;\r\n        background-color: #fff;\r\n        border-bottom: 1px solid ${gray5};\r\n        box-shadow: 0 3px 7px 0 rgba(110, 112, 114, 0.21);\r\n      `}\r\n    >\r\n      <div>\r\n        <Link\r\n          to=\"/\"\r\n          css={css`\r\n            font-size: 24px;\r\n            font-weight: bold;\r\n            color: ${gray1};\r\n            text-decoration: none;\r\n          `}\r\n        >\r\n          Among Investors\r\n        </Link>\r\n        <span\r\n          css={css`\r\n            margin-left: 10px;\r\n            font-size: 16px;\r\n            color: ${gray2};\r\n          `}\r\n        >\r\n          {process.env.REACT_APP_ENV || 'development'}\r\n        </span>\r\n      </div>\r\n      <form onSubmit={handleSearchSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          onChange={handleSearchInputChange}\r\n          value={search}\r\n          css={css`\r\n            box-sizing: border-box;\r\n            font-family: ${fontFamily};\r\n            font-size: ${fontSize};\r\n            padding: 8px 10px;\r\n            border: 1px solid ${gray5};\r\n            border-radius: 3px;\r\n            color: ${gray2};\r\n            background-color: white;\r\n            width: 200px;\r\n            height: 30px;\r\n            :focus {\r\n              outline-color: ${gray5};\r\n            }\r\n          `}\r\n        />\r\n      </form>\r\n      {!loading &&\r\n        (isAuthenticated ? (\r\n          <div>\r\n            <span>{user!.name}</span>\r\n            <Link\r\n              to={{ pathname: '/signout', state: { local: true } }}\r\n              css={buttonStyle}\r\n            >\r\n              <UserIcon />\r\n              <span>Sign Out</span>\r\n            </Link>\r\n          </div>\r\n        ) : (\r\n          <Link to=\"/signin\" css={buttonStyle}>\r\n            <UserIcon />\r\n            <span>Sign In</span>\r\n          </Link>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const HeaderWithRouter = withRouter(Header);\r\n","import { FC } from 'react';\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { gray2, gray3 } from './Styles';\r\nimport { QuestionData } from '../QuestionsData';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Props {\r\n  data: QuestionData;\r\n  showContent?: boolean;\r\n}\r\n\r\nexport const Question: FC<Props> = ({ data, showContent = true }) => (\r\n  <div\r\n    css={css`\r\n      padding: 10px 0px;\r\n    `}\r\n  >\r\n    <div\r\n      css={css`\r\n        padding: 10px 0px;\r\n        font-size: 19px;\r\n      `}\r\n    >\r\n      <Link\r\n        css={css`\r\n          text-decoration: none;\r\n          color: ${gray2};\r\n        `}\r\n        to={`questions/${data.questionId}`}\r\n      >\r\n        {data.title}\r\n      </Link>\r\n    </div>\r\n    {showContent && (\r\n      <div\r\n        css={css`\r\n    padding-bottom: 10px;\r\n    font-size: 15px;\r\n    color: ${gray2};}`}\r\n      >\r\n        {data.content.length > 50\r\n          ? `${data.content.substring(0, 50)}...`\r\n          : data.content}\r\n      </div>\r\n    )}\r\n    <div\r\n      css={css`\r\n        font-size: 12px;\r\n        font-style: italic;\r\n        color: ${gray3};\r\n      `}\r\n    >{`asked by ${\r\n      data.userName\r\n    } on ${data.created.toLocaleDateString()} ${data.created.toLocaleTimeString()}`}</div>\r\n  </div>\r\n);\r\n","import { FC } from 'react';\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { gray5, accent2 } from './Styles';\r\nimport { QuestionData } from '../QuestionsData';\r\nimport React from 'react';\r\nimport { Question } from './Question';\r\n\r\ninterface Props {\r\n  data: QuestionData[];\r\n  renderItem?: (item: QuestionData) => JSX.Element;\r\n}\r\n\r\nexport const QuestionList: FC<Props> = ({ data, renderItem }) => (\r\n  <ul\r\n    css={css`\r\n      list-style: none;\r\n      margin: 10px 0 0 0;\r\n      padding: 0px 20px;\r\n      background-color: #fff;\r\n      border-bottom-left-radius: 4px;\r\n      border-bottom-right-radius: 4px;\r\n      border-top: 3px solid ${accent2};\r\n      box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n    `}\r\n  >\r\n    {data.map((question) => (\r\n      <li\r\n        key={question.questionId}\r\n        css={css`\r\n          border-top: 1px solid ${gray5};\r\n          :first-of-type {\r\n            border-top: none;\r\n          }\r\n        `}\r\n      >\r\n        {renderItem ? renderItem(question) : <Question data={question} />}\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n","import React, { useEffect, useState, FC } from 'react';\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { PrimaryButton } from './Styles';\r\nimport { QuestionList } from './QuestionList';\r\nimport { getUnansweredQuestions, QuestionData } from '../QuestionsData';\r\nimport { Page } from './Page';\r\nimport { PageTitle } from './PageTitle';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { useAuth } from '../Auth';\r\n\r\nexport const HomePage: FC<RouteComponentProps> = ({ history }) => {\r\n  const [questions, setQuestions] = useState<QuestionData[] | null>(null);\r\n  const [questionsLoading, setQuestionsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    const doGetUnansweredQuestions = async () => {\r\n      const unansweredQuestions = await getUnansweredQuestions();\r\n      if (!cancelled) {\r\n        setQuestions(unansweredQuestions);\r\n        setQuestionsLoading(false);\r\n      }\r\n    };\r\n    doGetUnansweredQuestions();\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, []);\r\n\r\n  const handleAskQuestionClick = () => {\r\n    history.push('/ask');\r\n  };\r\n\r\n  const { isAuthenticated } = useAuth();\r\n\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          margin: 50px auto 20px auto;\r\n          padding: 30px 20px;\r\n          max-width: 600px;\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n          `}\r\n        >\r\n          <PageTitle\r\n            css={css`\r\n              font-size: 15px;\r\n              font-weight: bold;\r\n              margin: 10px 0px 5px;\r\n              text-align: center;\r\n              text-transform: uppercase;\r\n            `}\r\n          >\r\n            Unanswered Questions\r\n          </PageTitle>\r\n          {isAuthenticated && (\r\n            <PrimaryButton onClick={handleAskQuestionClick}>\r\n              Ask a Question\r\n            </PrimaryButton>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {questionsLoading ? (\r\n        <div\r\n          css={css`\r\n            font-size: 16px;\r\n            font-style: italic;\r\n          `}\r\n        >\r\n          Loading...\r\n        </div>\r\n      ) : (\r\n        <QuestionList data={questions || []} />\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Page } from './Page';\r\nimport { FC, useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { QuestionList } from './QuestionList';\r\nimport { searchQuestions, QuestionData } from '../QuestionsData';\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nexport const SearchPage: FC<RouteComponentProps> = ({ location }) => {\r\n  const [questions, setQuestions] = useState<QuestionData[]>([]);\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const search = searchParams.get('criteria') || '';\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    const doSearch = async (criteria: string) => {\r\n      const foundResults = await searchQuestions(criteria);\r\n      if (!cancelled) {\r\n        setQuestions(foundResults);\r\n      }\r\n    };\r\n    doSearch(search);\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, [search]);\r\n  return (\r\n    <Page title=\"Search Results\">\r\n      {search && (\r\n        <p\r\n          css={css`\r\n            font-size: 16px;\r\n            font-style: italic;\r\n            margin-top: 0px;\r\n          `}\r\n        >\r\n          for \"{search}\"\r\n        </p>\r\n      )}\r\n      <QuestionList data={questions} />\r\n    </Page>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { Page } from './Page';\r\nimport { StatusText } from './Styles';\r\nimport { useAuth } from '../Auth';\r\n\r\ntype SignInAction = 'signin' | 'signin-callback';\r\n\r\ninterface Props {\r\n  action: SignInAction;\r\n}\r\n\r\nexport const SignInPage: FC<Props> = ({ action }) => {\r\n  const { signIn } = useAuth();\r\n  if (action === 'signin') {\r\n    signIn();\r\n  }\r\n  return (\r\n    <Page title=\"Sign In\">\r\n      <StatusText>Signing in ...</StatusText>\r\n    </Page>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Page } from './Page';\r\nexport const NotFoundPage = () => <Page title=\"Page Not Found\" />;\r\n","import React, { FC } from 'react';\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { AnswerData } from '../QuestionsData';\r\nimport { gray3 } from './Styles';\r\ninterface Props {\r\n  data: AnswerData;\r\n}\r\nexport const Answer: FC<Props> = ({ data }) => (\r\n  <div\r\n    css={css`\r\n      padding: 10px 0px;\r\n    `}\r\n  >\r\n    <div\r\n      css={css`\r\n        padding: 10px 0px;\r\n        font-size: 13px;\r\n      `}\r\n    >\r\n      {data.content}\r\n    </div>\r\n    <div\r\n      css={css`\r\n        font-size: 12px;\r\n        font-style: italic;\r\n        color: ${gray3};\r\n      `}\r\n    >\r\n      {`Answered by ${data.userName} on\r\n${data.created.toLocaleDateString()}\r\n${data.created.toLocaleTimeString()}`}\r\n    </div>\r\n  </div>\r\n);\r\n","import React, { FC } from 'react';\r\nimport { AnswerData } from '../QuestionsData';\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { Answer } from './Answer';\r\nimport { gray5 } from './Styles';\r\n\r\ninterface Props {\r\n  data: AnswerData[];\r\n}\r\n\r\nexport const AnswerList: FC<Props> = ({ data }) => (\r\n  <ul\r\n    css={css`\r\n      list-style: none;\r\n      margin: 10px 0 0 0;\r\n      padding: 0;\r\n    `}\r\n  >\r\n    {data.map((answer) => (\r\n      <li\r\n        css={css`\r\n          border-top: 1px solid ${gray5};\r\n        `}\r\n        key={answer.answerId}\r\n      >\r\n        <Answer data={answer} />\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n","import React, { FC, useState, Fragment, useEffect } from 'react';\r\nimport { Page } from './Page';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport {\r\n  mapQuestionFromServer,\r\n  QuestionDataFromServer,\r\n  QuestionData,\r\n  getQuestion,\r\n  postAnswer,\r\n} from '../QuestionsData';\r\nimport { AnswerList } from './AnswerList';\r\n\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { gray3, gray6 } from './Styles';\r\nimport { Form, minLength, required, Values } from './Form';\r\nimport { Field } from './Field';\r\nimport {\r\n  HubConnectionBuilder,\r\n  HubConnectionState,\r\n  HubConnection,\r\n} from '@aspnet/signalr';\r\nimport { useAuth } from '../Auth';\r\n\r\ninterface RouteParams {\r\n  questionId: string;\r\n}\r\n\r\nexport const QuestionPage: FC<RouteComponentProps<RouteParams>> = ({\r\n  match,\r\n}) => {\r\n  const [question, setQuestion] = useState<QuestionData | null>(null);\r\n\r\n  const setUpSignalRConnection = async (questionId: number) => {\r\n    // setup connection to real-time SignalR API\r\n    const connection = new HubConnectionBuilder()\r\n      .withUrl('https://localhost:44332/questionshub')\r\n      .withAutomaticReconnect()\r\n      .build();\r\n    // handle Message function being called\r\n    connection.on('Message', (message: string) => {\r\n      console.log('Message', message);\r\n    });\r\n    // handle ReceiveQuestion function being called\r\n    connection.on('RecieveQuestion', (question: QuestionDataFromServer) => {\r\n      console.log('RecieveQuestion', question);\r\n      setQuestion(mapQuestionFromServer(question));\r\n    });\r\n    // start the connection\r\n    try {\r\n      await connection.start();\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    // subscribe to question\r\n    if (connection.state === HubConnectionState.Connected) {\r\n      connection.invoke('SubscribeQuestion', questionId).catch((err: Error) => {\r\n        return console.error(err.toString());\r\n      });\r\n    }\r\n    // return the connection\r\n    return connection;\r\n  };\r\n\r\n  const cleanUpSignalRConnection = async (\r\n    questionId: number,\r\n    connection: HubConnection,\r\n  ) => {\r\n    // unsubscribe from the question\r\n    if (connection.state === HubConnectionState.Connected) {\r\n      try {\r\n        await connection.invoke('UnsubscribeQuestion', questionId);\r\n      } catch (err) {\r\n        return console.error(err.toString());\r\n      }\r\n      // stop the connection\r\n      connection.off('Message');\r\n      connection.off('RecieveQuestion');\r\n      connection.stop();\r\n    } else {\r\n      connection.off('Message');\r\n      connection.off('RecieveQuestion');\r\n      connection.stop();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    const doGetQuestion = async (questionId: number) => {\r\n      const foundQuestion = await getQuestion(questionId);\r\n      if (!cancelled) {\r\n        setQuestion(foundQuestion);\r\n      }\r\n    };\r\n    let connection: HubConnection;\r\n    if (match.params.questionId) {\r\n      const questionId = Number(match.params.questionId);\r\n      doGetQuestion(questionId);\r\n      setUpSignalRConnection(questionId).then((con) => {\r\n        connection = con;\r\n      });\r\n    }\r\n    return function cleanUp() {\r\n      cancelled = true;\r\n      if (match.params.questionId) {\r\n        const questionId = Number(match.params.questionId);\r\n        cleanUpSignalRConnection(questionId, connection);\r\n      }\r\n    };\r\n  }, [match.params.questionId]);\r\n\r\n  const handleSubmit = async (values: Values) => {\r\n    const result = await postAnswer({\r\n      questionId: question!.questionId,\r\n      content: values.content,\r\n      userName: 'Fred',\r\n      created: new Date(),\r\n    });\r\n    return { success: result ? true : false };\r\n  };\r\n\r\n  const { isAuthenticated } = useAuth();\r\n\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          background-color: white;\r\n          padding: 15px 20px 20px 20px;\r\n          border-radius: 4px;\r\n          border: 1px solid ${gray6};\r\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n        `}\r\n      >\r\n        <div\r\n          css={css`\r\n            font-size: 19px;\r\n            font-weight: bold;\r\n            margin: 10px 0px 5px;\r\n          `}\r\n        >\r\n          {question === null ? '' : question.title}\r\n        </div>\r\n        {question !== null && (\r\n          <Fragment>\r\n            <p\r\n              css={css`\r\n                margin-top: 0px;\r\n                background-color: white;\r\n              `}\r\n            >\r\n              {question.content}\r\n            </p>\r\n            <div\r\n              css={css`\r\n                font-size: 12px;\r\n                font-style: italic;\r\n                color: ${gray3};\r\n              `}\r\n            >\r\n              {`Asked by ${question.userName} on\r\n${question.created.toLocaleDateString()}\r\n${question.created.toLocaleTimeString()}`}\r\n            </div>\r\n            <AnswerList data={question.answers} />\r\n            {isAuthenticated && (\r\n              <div\r\n                css={css`\r\n                  margin-top: 20px;\r\n                `}\r\n              >\r\n                <Form\r\n                  onSubmit={handleSubmit}\r\n                  submitCaption=\"Submit Your Answer\"\r\n                  validationRules={{\r\n                    content: [\r\n                      { validator: required },\r\n                      { validator: minLength, arg: 50 },\r\n                    ],\r\n                  }}\r\n                >\r\n                  <Field name=\"content\" label=\"Your Answer\" type=\"TextArea\" />\r\n                </Form>\r\n              </div>\r\n            )}\r\n          </Fragment>\r\n        )}\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { Page } from './Page';\r\nimport { StatusText } from './Styles';\r\nimport { useAuth } from '../Auth';\r\n\r\ntype SignoutAction = 'signout' | 'signout-callback';\r\ninterface Props {\r\n  action: SignoutAction;\r\n}\r\n\r\nexport const SignOutPage: FC<Props> = ({ action }) => {\r\n  let message = 'Signing out ...';\r\n  const { signOut } = useAuth();\r\n  switch (action) {\r\n    case 'signout':\r\n      signOut();\r\n      break;\r\n    case 'signout-callback':\r\n      message = 'You successfully signed out!';\r\n      break;\r\n  }\r\n  return (\r\n    <Page title=\"Sign Out\">\r\n      <StatusText>{message}</StatusText>\r\n    </Page>\r\n  );\r\n};\r\n","import React, { FC, Fragment } from 'react';\r\nimport { Page } from './Page';\r\nimport { useAuth } from '../Auth';\r\nexport const AuthorizedPage: FC = ({ children }) => {\r\n  const { isAuthenticated } = useAuth();\r\n  if (isAuthenticated) {\r\n    return <Fragment>{children}</Fragment>;\r\n  } else {\r\n    return <Page title=\"You do not have access to this page\" />;\r\n  }\r\n};\r\n","// eslint-disable-next-line\nimport React, { lazy, Suspense } from 'react';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '../Store';\nimport { HeaderWithRouter as Header } from './Header';\nimport { HomePage } from './HomePage';\nimport { fontFamily, fontSize, gray2 } from './Styles';\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\nimport { SearchPage } from './SearchPage';\nimport { SignInPage } from './SignInPage';\nimport { NotFoundPage } from './NotFoundPage';\nimport { QuestionPage } from './QuestionPage';\nimport { SignOutPage } from './SignOutPage';\nimport { AuthProvider } from '../Auth';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { AuthorizedPage } from './AuthorizedPage';\nconst AskPage = lazy(() => import('./AskPage'));\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <AuthProvider>\n        <BrowserRouter>\n          {' '}\n          <div\n            css={css`\n              font-family: ${fontFamily};\n              font-size: ${fontSize};\n              color: ${gray2};\n            `}\n          >\n            <Header />\n            <Switch>\n              <Redirect from=\"/home\" to=\"/\" />\n              <Route exact path=\"/\" component={HomePage} />\n              <Route path=\"/search\" component={SearchPage} />\n              <Route path=\"/ask\">\n                <Suspense\n                  fallback={\n                    <div\n                      css={css`\n                        margin-top: 100px;\n                        text-align: center;\n                      `}\n                    >\n                      Loading...\n                    </div>\n                  }\n                >\n                  <AuthorizedPage>\n                    <AskPage />\n                  </AuthorizedPage>\n                </Suspense>\n              </Route>\n              <Route\n                path=\"/signin\"\n                render={() => <SignInPage action=\"signin\" />}\n              />\n              <Route\n                path=\"/signin-callback\"\n                render={() => <SignInPage action=\"signin-callback\" />}\n              />\n              <Route\n                path=\"/signout\"\n                render={() => <SignOutPage action=\"signout\" />}\n              />\n              <Route\n                path=\"/signout-callback\"\n                render={() => <SignOutPage action=\"signout-callback\" />}\n              />\n              <Route path=\"/questions/:questionId\" component={QuestionPage} />\n              <Route component={NotFoundPage} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </AuthProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}